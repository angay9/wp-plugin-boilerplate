<?php

namespace PluginBoilerplate\Settings;

/**
 * Generated by the WordPress Option Page generator
 * at http://jeremyhixon.com/wp-tools/option-page/
 * https://gist.github.com/hlashbrooke/9267467
 */

class Settings 
{
	protected $settings;

    protected $optionName = 'plugin_settings';

    protected $title = 'Plugin Settings';

    protected $fields = [];

    public function __construct() 
    {
		add_action('admin_menu', [$this, 'pbSettingsAddPluginPage']);
        add_action('admin_init', [$this, 'pbSettingsPageInit']);
    }

	public function pbSettingsAddPluginPage() {
		add_menu_page(
			$this->title, // page_title
			$this->title, // menu_title
			'manage_options', // capability
			'pb-settings', // menu_slug
			[$this, 'pbSettingsAddAdminPage'], // function
			'dashicons-admin-generic', // icon_url
			81 // position
       );
    }

	public function pbSettingsAddAdminPage() {
		$this->settings = get_option($this->optionName); ?>

		<div class="wrap">
			<h2><?php echo $this->title; ?></h2>
			<p></p>
			<?php settings_errors(); ?>

			<form method="post" action="options.php">
				<?php
					settings_fields('pb_settings_option_group');
					do_settings_sections('pb-settings');
					submit_button();
				?>
			</form>
		</div>
	<?php }

	public function pbSettingsPageInit() {
		register_setting(
			'pb_settings_option_group', // option_group
			$this->optionName, // option_name
			[$this, 'sanitize']// sanitize_callback
		);

        $this->fields['default'] = [
            'title' => 'Default',
            'fields' => [
                [
                    'id'            => 'sample_field',
                    'label'			=> __('Some Text' , 'plugin-boilerplate'),
                    'description'	=> __('This is a standard text field.', 'plugin-boilerplate'),
                    'type'			=> 'text',
                    'default'		=> '',
                    'placeholder'	=> __('Placeholder text', 'plugin-boilerplate')
                ]
            ]
        ];

        foreach ($this->fields as $section => $config) {
            add_settings_section(
                'pb_setting_' . $section, // id
                $config['title'], // title
                [$this, 'pluginSettingsSectionInfo'], // callback
                'pb-settings' // page
            );
    
            foreach ($config['fields'] as $field) {
                // var_dump($field);
                add_settings_field(
                    $field['id'], // id
                    $field['label'], // title
                    function() use ($field) {
                        $this->displayField($field);
                    }, // callback
                    'pb-settings', // page
                    'pb_setting_' . $section // section
               );
            }
        }
    }

    public function pluginSettingsSectionInfo()
    {
        
    }
    
	public function sanitize($input) {
        $sanitary_values = [];
        $sanitize_fields = [
            'sample_field',
        ];

        foreach ($sanitize_fields as $field) {
            if (is_array($input[$field])) {
                $sanitary_values[$field] = array_map('esc_attr', $input[$field]);
            }
            else {
                $sanitary_values[$field] = sanitize_text_field($input[$field]);
            }
        }

		return $sanitary_values;
	}

    public function displayField($field) 
    {
        $optionName = $this->optionName . '[' . $field['id'] . ']';
        $option = pb_array_get($this->settings, $field['id'], '');
        $html = '';

		$data = '';

		if (isset($field['default'])) {
			$data = $field['default'];
			if ($option) {
				$data = $option;
			}
		}

		switch ($field['type']) {

			case 'text':
			case 'password':
			case 'number':
				$html .= '<input id="' . esc_attr($field['id']) . '" type="' . $field['type'] . '" name="' . esc_attr($optionName) . '" placeholder="' . esc_attr($field['placeholder']) . '" value="' . $data . '"/>' . "\n";
			break;

			case 'text_secret':
				$html .= '<input id="' . esc_attr($field['id']) . '" type="text" name="' . esc_attr($optionName) . '" placeholder="' . esc_attr($field['placeholder']) . '" value=""/>' . "\n";
			break;

			case 'textarea':
				$html .= '<textarea id="' . esc_attr($field['id']) . '" rows="5" cols="50" name="' . esc_attr($optionName) . '" placeholder="' . esc_attr($field['placeholder']) . '">' . $data . '</textarea><br/>'. "\n";
			break;

			case 'checkbox':
				$checked = '';
				if ($option && 'on' == $option){
					$checked = 'checked="checked"';
				}
				$html .= '<input id="' . esc_attr($field['id']) . '" type="' . $field['type'] . '" name="' . esc_attr($optionName) . '" ' . $checked . '/>' . "\n";
			break;

			case 'checkbox_multi':
				foreach($field['options'] as $k => $v) {
					$checked = false;
					if (in_array($k, $data)) {
						$checked = true;
					}
					$html .= '<label for="' . esc_attr($field['id'] . '_' . $k) . '"><input type="checkbox" ' . checked($checked, true, false) . ' name="' . esc_attr($optionName) . '[]" value="' . esc_attr($k) . '" id="' . esc_attr($field['id'] . '_' . $k) . '" /> ' . $v . '</label> ';
				}
			break;

			case 'radio':
				foreach($field['options'] as $k => $v) {
					$checked = false;
					if ($k == $data) {
						$checked = true;
					}
					$html .= '<label for="' . esc_attr($field['id'] . '_' . $k) . '"><input type="radio" ' . checked($checked, true, false) . ' name="' . esc_attr($optionName) . '" value="' . esc_attr($k) . '" id="' . esc_attr($field['id'] . '_' . $k) . '" /> ' . $v . '</label> ';
				}
			break;

			case 'select':
				$html .= '<select name="' . esc_attr($optionName) . '" id="' . esc_attr($field['id']) . '">';
				foreach($field['options'] as $k => $v) {
					$selected = false;
					if ($k == $data) {
						$selected = true;
					}
					$html .= '<option ' . selected($selected, true, false) . ' value="' . esc_attr($k) . '">' . $v . '</option>';
				}
				$html .= '</select> ';
			break;

			case 'select_multi':
				$html .= '<select name="' . esc_attr($optionName) . '[]" id="' . esc_attr($field['id']) . '" multiple="multiple">';
				foreach($field['options'] as $k => $v) {
					$selected = false;
					if (in_array($k, $data)) {
						$selected = true;
					}
					$html .= '<option ' . selected($selected, true, false) . ' value="' . esc_attr($k) . '" />' . $v . '</label> ';
				}
				$html .= '</select> ';
			break;

			case 'image':
				$image_thumb = '';
				if ($data) {
					$image_thumb = wp_get_attachment_thumb_url($data);
				}
				$html .= '<img id="' . $optionName . '_preview" class="image_preview" src="' . $image_thumb . '" /><br/>' . "\n";
				$html .= '<input id="' . $optionName . '_button" type="button" data-uploader_title="' . __('Upload an image' , 'plugin_textdomain') . '" data-uploader_button_text="' . __('Use image' , 'plugin_textdomain') . '" class="image_upload_button button" value="'. __('Upload new image' , 'plugin_textdomain') . '" />' . "\n";
				$html .= '<input id="' . $optionName . '_delete" type="button" class="image_delete_button button" value="'. __('Remove image' , 'plugin_textdomain') . '" />' . "\n";
				$html .= '<input id="' . $optionName . '" class="image_data_field" type="hidden" name="' . $optionName . '" value="' . $data . '"/><br/>' . "\n";
			break;

			case 'color':
				?><div class="color-picker" style="position:relative;">
			        <input type="text" name="<?php esc_attr_e($optionName); ?>" class="color" value="<?php esc_attr_e($data); ?>" />
			        <div style="position:absolute;background:#FFF;z-index:99;border-radius:100%;" class="colorpicker"></div>
			    </div>
			    <?php
			break;

		}

		switch ($field['type']) {

			case 'checkbox_multi':
			case 'radio':
			case 'select_multi':
				$html .= '<br/><p class="description">' . $field['description'] . '</p>';
			break;

			default:
				$html .= '<label for="' . esc_attr($field['id']) . '"><p class="description">' . $field['description'] . '</p></label>' . "\n";
			break;
		}

		echo $html;
	}
}